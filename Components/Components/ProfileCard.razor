@using blazor.Services
@inject DbService DbService;
@inject UserService UserService;
@rendermode InteractiveServer

<style>
    .profile__card {
        display: flex;
        justify-content: space-between;
        flex-flow: column;
        width: auto;
        height: 200px;
        padding{
            padding: 0.5rem;
        }
        
    }

    .profile__info {
        
        h6,p{
            overflow: hidden;
            text-overflow: ellipsis;
            text-wrap: nowrap;
        }
    }

    .profile__header {
        display: flex;
        justify-content: space-between;
        flex-flow: row;
    }

    
</style>
@if(userProfile == null){
    <MudCard>
        <MudCardContent>
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        </MudCardContent>
    </MudCard>
}
else{
    <MudCard>
        <MudCardContent Class="profile__card">
            <div Class="profile__header">
                <div Class="profile__info">
                    <MudAvatar Size="Size.Medium">
                        @if(userProfile.ProfileImage != null){
                            <MudImage Src="@userProfile.ProfileImage" />
                        }
                        else{
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                        }
                    </MudAvatar>
                    <MudText Typo="Typo.h6">@userProfile.Username</MudText>
                    <MudText Typo="Typo.body2">@userProfile.Email</MudText>
                </div>
                <div>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="handleClose" />
                </div>
            </div>
        </MudCardContent>
        <MudCardContent>
            <MudText Typo="Typo.body2">@userProfile.DateRegistered</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudButton Color="Color.Primary" Variant="Variant.Filled">Edit</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="deleteUser">Delete</MudButton>
        </MudCardActions>
    </MudCard>
}    

@code {
    [Parameter] public RenderedUser User { get; set; }
    [Parameter] public Action<RenderedUser> HideProfileCard { get; set; }

    private User userProfile { get; set; }
    
    private async Task GetUserProfile(int userId){
        userProfile = await UserService.GetUserProfile(userId);
    }

    protected override async Task OnInitializedAsync(){
        await Task.Delay(100);
        await GetUserProfile(User.Id);
    }
    public void ViewProfile(){
        Console.WriteLine("ViewProfile");
    }

    public void handleClose(){
        HideProfileCard(User);
    }

    public async Task deleteUser(){
        await UserService.DeleteUser(User.Id);
        HideProfileCard(User);
        Console.WriteLine("Deleted user");
    }
}

