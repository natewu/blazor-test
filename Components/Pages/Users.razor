@page "/users"
@using blazor.Services
@inject DbService DbService
@inject UserService UserService
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Users</PageTitle>
<style>
    .hidden {
        visibility: hidden;
    }
</style>
@if(users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudMainContent>
        <MudContainer>
            <MudDataGrid Items="@users" T="RenderedUser" PageSize="10" Sortable="true" Filterable="true" Search="true">
                <Columns >
                    <PropertyColumn Property="x => x.Id" Title="Id">
                        <CellTemplate Context="context">
                            <MudText Typo="Typo.body1" @onmouseover="() => ShowProfileCard(context.Item)" @onmouseout="() => StartHideProfileCardTimer(context.Item)">
                                @context.Item.Id
                            </MudText>
                            @if(userProfileShown != null && userProfileShown.Id == context.Item.Id && userProfileShown.ShowProfileCard)
                            {
                                <MudPopover 
                                    Open="@((userProfileShown.Id == context.Item.Id) && userProfileShown.ShowProfileCard)" 
                                    AnchorOrigin="Origin.TopCenter" 
                                    TransformOrigin="Origin.BottomCenter" 
                                    OnMouseOver="() => CancelHideProfileCardTimer(context.Item)" 
                                    OnMouseOut="() => StartHideProfileCardTimer(context.Item)"
                                    Class="@(userProfileShown.ShowProfileCard ? "" : "hidden")"
                                >
                                    <blazor.Components.Components.ProfileCard User="@userProfileShown" />
                                </MudPopover>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Username" Title="Username" />
                    <PropertyColumn Title="Email" Property="x => x.Email">
                        <CellTemplate Context="context" >
                            @if(context.Item.ShowEdit)
                            {
                                <MudTextField 
                                    Typo="Typo.body1" 
                                    @bind-Value="context.Item.Email" 
                                    onValueChanged="context.OnValueChanged" 
                                    OnBlur="async () => await HandleLeave(context.Item)"
                                />
                            }
                            else
                            {
                                <MudText Typo="Typo.body1" @onclick="() => context.Item.ToggleEditMode()">@context.Item.Email</MudText>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudContainer>
    </MudMainContent>
}

@code {
    private List<RenderedUser> users { get; set; }
    private RenderedUser userProfileShown { get; set; }
    private Timer hoverTimer;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        var fetchedUsers = await UserService.GetUsers();

        // Turn into RenderedUser
        users = fetchedUsers.Select(user => new RenderedUser
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email
        }).ToList();
    }

    public class RenderedUser : User
    {
        public bool ShowEdit { get; set; } = false;
        public bool ShowProfileCard { get; set; } = false;

        public void ToggleEditMode()
        {
            ShowEdit = !ShowEdit;
        }

        public void DisplayProfileCard()
        {
            ShowProfileCard = true;
        }

        public void HideProfileCard()
        {
            ShowProfileCard = false;
        }
    }

    public async Task HandleLeave(RenderedUser user)
    {
        user.ToggleEditMode();

        // Save changes
        await UserService.UpdateUser(user);

        Snackbar.Add("Saved", Severity.Success, config =>
        {
            config.VisibleStateDuration = 500;
            config.HideTransitionDuration = 200;
            config.ShowTransitionDuration = 200;
        });
        StateHasChanged();
    }

    private void ShowProfileCard(RenderedUser user)
    {
        if (userProfileShown != null)
        {
            userProfileShown.HideProfileCard();
            userProfileShown = null;
        }

        
        
        user.DisplayProfileCard();
        userProfileShown = user;
        CancelHideProfileCardTimer(user);
        InvokeAsync(StateHasChanged);
    }

    private void StartHideProfileCardTimer(RenderedUser user)
    {
        CancelHideProfileCardTimer(user);
        hoverTimer = new Timer(HideProfileCard, user, 2000, Timeout.Infinite);
    }

    private void CancelHideProfileCardTimer(RenderedUser user)
    {
        hoverTimer?.Dispose();
    }

    private void HideProfileCard(object state)
    {
        var user = state as RenderedUser;
        user?.HideProfileCard();
        InvokeAsync(StateHasChanged);
    }
}

