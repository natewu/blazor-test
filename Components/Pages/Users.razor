@page "/users"
@using blazor.Services
@inject DbService DbService;
@inject UserService UserService;
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Users</PageTitle>

<div class="user__tables">
    @if(users == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudContainer>
            <MudDataGrid @ref="grid" AfterScroll="OnAfterScroll" Class="datagrid" Height="40vh" FixedHeader="true" Items="@users" T="RenderedUser" PageSize="10" Sortable="true" Filterable="true" Search="true" ItemSize="10" ColumnResizeMode="ResizeMode.Column" >
                <Columns >
                    <PropertyColumn Property="x => x.Id" Title="Icon" HeaderStyle="max-width:50px;">
                        <CellTemplate>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Person" Color="Color.Primary" OnClick="() => handleProfileClick(context.Item)"/>
                            <MudPopover Open="@context.Item.ShowProfileCard" AnchorOrigin="Origin.CenterRight" TransformOrigin="Origin.CenterLeft">
                                <blazor.Components.Components.ProfileCard User="@context.Item" HideProfileCard="HideProfileCard" />
                            </MudPopover>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Id" Title="Id">
                        <CellTemplate Context="context" >
                            <MudText Typo="Typo.body1">
                                @context.Item.Id
                            </MudText>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Username" Title="Username" />
                    <PropertyColumn Title="Email" Property="x => x.Email"  HeaderStyle="min-width:200px">
                        <CellTemplate Context="context" >
                            <MudTextField 
                                @ref="context.Item.emailField"
                                Typo="Typo.body1" 
                                @bind-Value="context.Item.Email" 
                                onValueChanged="context.OnValueChanged" 
                                OnBlur="async () => await handleLeave(context.Item)"
                            />
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Id" Title="Score" HeaderStyle="min-width:30px !important; width: 90px !important;"  CellStyle="min-width: 90px;">
                        <CellTemplate>
                            <MudNumericField Typo="Typo.body1" DisableUnderLine Value="10" HideSpinButtons="true" Step=0 />
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
            <MudButton Class="add__button" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewRow">Add User</MudButton>
            
        </MudContainer>
        @* <MudContainer>
            <MudDataGrid Class="datagrid" Height="40vh" FixedHeader="true" Items="@users" T="RenderedUser" PageSize="10" Sortable="true" Filterable="true" Search="true" ItemSize="10" ColumnResizeMode="ResizeMode.Column">
                <Columns >
                    <PropertyColumn Property="x => x.Id" Title="Icon" HeaderStyle="max-width:50px;">
                        <CellTemplate>
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Person" Color="Color.Primary"/>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Id" Title="Id">
                        <CellTemplate Context="context" >
                            <MudText Typo="Typo.body1">
                                @context.Item.Id
                            </MudText>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Username" Title="Username" />
                    <PropertyColumn Title="Email" Property="x => x.Email"  HeaderStyle="min-width:200px">
                        <CellTemplate Context="context" >
                            <MudTextField 
                                Typo="Typo.body1" 
                                @bind-Value="context.Item.Email" 
                                onValueChanged="context.OnValueChanged" 
                                OnBlur="async () => await handleLeave(context.Item)"
                            />
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Id" Title="Score" HeaderStyle="min-width:30px !important; width: 90px !important;"  CellStyle="min-width: 90px;">
                        <CellTemplate>
                            <MudNumericField Typo="Typo.body1" DisableUnderLine Value="10"  />
                        </CellTemplate>
                    </PropertyColumn>
                </Columns>
            </MudDataGrid>
        </MudContainer> *@
    }
</div>


@code{
    private List<RenderedUser> users { get; set; }
    private RenderedUser displayedProfile { get; set; }
    private MudDataGrid<RenderedUser> grid { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        var fetchedUsers = await UserService.GetUsers();

        // Turn into RenderedUser
        users = fetchedUsers.Select(user => new RenderedUser
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email
        }).ToList();
    }


    public async Task handleLeave(RenderedUser user){
        user.toggleEditMode();

        // Save changes
        UserService.UpdateUser(user);

        Snackbar.Add("Saved", Severity.Success, config =>
        {
            config.VisibleStateDuration = 500;
            config.HideTransitionDuration = 200;
            config.ShowTransitionDuration = 200;
        });
        StateHasChanged();
    }

    public void DisplayProfileCard(RenderedUser user){
        displayedProfile = user;
        displayedProfile.DisplayProfileCard();
        StateHasChanged();
    }

    public void HideProfileCard(RenderedUser user){
        displayedProfile = user;
        displayedProfile.HideProfileCard();
        StateHasChanged();
    }

    public void handleProfileClick(RenderedUser user){
        if(displayedProfile != null){
            if((displayedProfile.Id == user.Id) && displayedProfile.ShowProfileCard){
                HideProfileCard(user);
            }
            else{
                HideProfileCard(displayedProfile);
                DisplayProfileCard(user);
            }
        }
        else{
            DisplayProfileCard(user);
        }
    }

    private void AddNewRow()
    {
        if(users.Last().Username == string.Empty || users.Last().Email == string.Empty)
        {
            Snackbar.Add("Please fill the existing row.", Severity.Error);
            return;
        }

        var newUser = new RenderedUser
        {
            Username = string.Empty,
            Email = string.Empty,
            ShowProfileCard = false
        };
        
        users.Add(newUser);
    
        // get the last row from the grid
        var lastRow = grid.Items.Last();
        
        Console.WriteLine(lastRow.Email);
        lastRow.emailField.FocusAsync();
    }
}

<style>
    .mud-table-cell{
        padding: 0.05rem 0.25rem 0.05rem 1rem !important;
    }
    .mud-input.mud-input-underline::before{
        border-bottom: none !important;
    }
    .mud-input.mud-input-underline::after{
        padding: 0 !important;
    }

    .score{
        width: 100px !important;
    }
    .user__tables{
        display: flex;
        flex-flow: column;
        justify-content: space-evenly;
        height: 100%;
    }

    .add__button{
        margin-top: 1rem;
    }

    .datagrid{
        @* height: 20vh;
        overflow: auto; *@
    }
</style>
