@page "/weather"
@using System.Net.Http
@rendermode InteractiveServer

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{   
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@forecasts" T="WeatherForecast" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)" 
                StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges">
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date" />
            <PropertyColumn Property="x => x.TemperatureC" Title="Temp"/>
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(handleClick)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
}
@code{
    private WeatherForecast[] forecasts;
    public WeatherForecast SelectedForecast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        forecasts = GenerateWeatherForecast();
    }

    public class WeatherForecast
    {
        public WeatherForecast(DateTime date, int temperatureC)
        {
            Date = date;
            TemperatureC = temperatureC;
        }
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
    }

    public WeatherForecast[] GenerateWeatherForecast()
    {
        var rng = new Random();
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        (
            DateTime.Now.AddDays(index),
            rng.Next(-20, 55)
        ))
        .ToArray();
    }

    private bool _readOnly = false;
    private bool _isCellEditMode = false;
    private bool _editTriggerRowClick;

    private void StartedEditingItem(WeatherForecast item)
    {
        _isCellEditMode = true;
        SelectedForecast = item;
        StateHasChanged();

    }

    private void CanceledEditingItem(WeatherForecast item)
    {
        _isCellEditMode = false;
        SelectedForecast = null;
        StateHasChanged();

    }

    private void CommittedItemChanges(WeatherForecast item)
    {
        _isCellEditMode = false;
        SelectedForecast = null;
        StateHasChanged();

    }

    public void handleClick(){
        _isCellEditMode = !_isCellEditMode;
        StateHasChanged();
    }
}
