@page "/weather"
@using System.Net.Http
@rendermode InteractiveServer
@inject ISnackbar Snackbar

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Weather</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>

@if (forecasts == null)
{   
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@forecasts" T="WeatherForecast" ReadOnly="@_readOnly">
        <Columns>
            <PropertyColumn Property="x => x.Date" Title="Date" />
            <PropertyColumn Title="Temp" Property="x => x.TemperatureC">
                <CellTemplate Context="context" >
                    @if(context.Item.ShowEdit)
                    {
                        <MudNumericField 
                            Typo="Typo.body1" 
                            @bind-Value="context.Item.TemperatureC" 
                            onValueChanged="context.OnValueChanged" 
                            OnBlur="() => handleLeave(context.Item)"
                            @onkeypress="e => handleEnterKeyPress(e, context.Item)"    
                        />
                    }
                    else
                    {
                        <MudText Typo="Typo.body1"  @onclick="()=>context.Item.toggleEditMode()">@context.Item.TemperatureC</MudText>
                    }
                </CellTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>
}
@code{
    public WeatherForecast[] forecasts;
    public WeatherForecast SelectedForecast { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        forecasts = GenerateWeatherForecast();
    }

    public class WeatherForecast
    {
        public WeatherForecast(DateTime date, int temperatureC)
        {
            Date = date;
            TemperatureC = temperatureC;
        }
        public DateTime Date { get; set; }
        public int TemperatureC { get; set; }
        public bool ShowEdit { get; set; } = false;

        public void toggleEditMode(){
            ShowEdit = !ShowEdit;
        }
    }

    public WeatherForecast[] GenerateWeatherForecast()
    {
        var rng = new Random();
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        (
            DateTime.Now.AddDays(index),
            rng.Next(-20, 55)
        ))
        .ToArray();
    }

    private bool _readOnly = false;
    private bool _isCellEditMode = false;
    private bool _editTriggerRowClick;

    public void handleClick(){
        _isCellEditMode = !_isCellEditMode;
        StateHasChanged();
    }

    public void toggleEditMode(){
        _isCellEditMode = !_isCellEditMode;
        StateHasChanged();
        Console.WriteLine("toggleEditMode");
    }
    public void handleLeave(WeatherForecast forecast){
        forecast.toggleEditMode();
        StateHasChanged();
        Snackbar.Add("Saved", Severity.Success, config =>
        {
            config.VisibleStateDuration = 500;
            config.HideTransitionDuration = 200;
            config.ShowTransitionDuration = 200;
        });
    }

    public void handleEnterKeyPress(KeyboardEventArgs e, WeatherForecast forecast){
        Console.WriteLine("handleEnterKeyPress");
        Console.WriteLine(e.Key);
        if (e.Key == "Enter")
        {
            handleLeave(forecast);
        }
    }
}